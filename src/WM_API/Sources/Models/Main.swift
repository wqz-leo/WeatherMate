//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Main: APIModel {

    /** Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var temp: Double

    /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */
    public var pressure: Double

    /** Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var tempMin: Double

    /** Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var tempMax: Double

    /** Humidity, % */
    public var humidity: Double

    /** Atmospheric pressure on the ground level, hPa */
    public var grndLevel: Double?

    /** Atmospheric pressure on the sea level, hPa */
    public var seaLevel: Double?

    public init(temp: Double, pressure: Double, tempMin: Double, tempMax: Double, humidity: Double, grndLevel: Double? = nil, seaLevel: Double? = nil) {
        self.temp = temp
        self.pressure = pressure
        self.tempMin = tempMin
        self.tempMax = tempMax
        self.humidity = humidity
        self.grndLevel = grndLevel
        self.seaLevel = seaLevel
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        temp = try container.decode("temp")
        pressure = try container.decode("pressure")
        tempMin = try container.decode("temp_min")
        tempMax = try container.decode("temp_max")
        humidity = try container.decode("humidity")
        grndLevel = try container.decodeIfPresent("grnd_level")
        seaLevel = try container.decodeIfPresent("sea_level")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(temp, forKey: "temp")
        try container.encode(pressure, forKey: "pressure")
        try container.encode(tempMin, forKey: "temp_min")
        try container.encode(tempMax, forKey: "temp_max")
        try container.encode(humidity, forKey: "humidity")
        try container.encodeIfPresent(grndLevel, forKey: "grnd_level")
        try container.encodeIfPresent(seaLevel, forKey: "sea_level")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Main else { return false }
      guard self.temp == object.temp else { return false }
      guard self.pressure == object.pressure else { return false }
      guard self.tempMin == object.tempMin else { return false }
      guard self.tempMax == object.tempMax else { return false }
      guard self.humidity == object.humidity else { return false }
      guard self.grndLevel == object.grndLevel else { return false }
      guard self.seaLevel == object.seaLevel else { return false }
      return true
    }

    public static func == (lhs: Main, rhs: Main) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
