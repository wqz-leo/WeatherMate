//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DailyWeathertItem: APIModel {

    /** Cloudiness, % */
    public var clouds: Double?

    /** Wind direction, degrees (meteorological) */
    public var deg: Double?

    /** Time of data forecasted, unix, UTC */
    public var dt: DateTime?

    /** Humidity, % */
    public var humidity: Double?

    /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */
    public var pressure: Double?

    /** Precipitation volume, mm */
    public var rain: Double?

    /** Snow volume, mm */
    public var snow: Double?

    /** Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour. */
    public var speed: Double?

    public var weather: [Weather]?

    public init(clouds: Double? = nil, deg: Double? = nil, dt: DateTime? = nil, humidity: Double? = nil, pressure: Double? = nil, rain: Double? = nil, snow: Double? = nil, speed: Double? = nil, weather: [Weather]? = nil) {
        self.clouds = clouds
        self.deg = deg
        self.dt = dt
        self.humidity = humidity
        self.pressure = pressure
        self.rain = rain
        self.snow = snow
        self.speed = speed
        self.weather = weather
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        clouds = try container.decodeIfPresent("clouds")
        deg = try container.decodeIfPresent("deg")
        dt = try container.decodeIfPresent("dt")
        humidity = try container.decodeIfPresent("humidity")
        pressure = try container.decodeIfPresent("pressure")
        rain = try container.decodeIfPresent("rain")
        snow = try container.decodeIfPresent("snow")
        speed = try container.decodeIfPresent("speed")
        weather = try container.decodeArrayIfPresent("weather")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(clouds, forKey: "clouds")
        try container.encodeIfPresent(deg, forKey: "deg")
        try container.encodeIfPresent(dt, forKey: "dt")
        try container.encodeIfPresent(humidity, forKey: "humidity")
        try container.encodeIfPresent(pressure, forKey: "pressure")
        try container.encodeIfPresent(rain, forKey: "rain")
        try container.encodeIfPresent(snow, forKey: "snow")
        try container.encodeIfPresent(speed, forKey: "speed")
        try container.encodeIfPresent(weather, forKey: "weather")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DailyWeathertItem else { return false }
      guard self.clouds == object.clouds else { return false }
      guard self.deg == object.deg else { return false }
      guard self.dt == object.dt else { return false }
      guard self.humidity == object.humidity else { return false }
      guard self.pressure == object.pressure else { return false }
      guard self.rain == object.rain else { return false }
      guard self.snow == object.snow else { return false }
      guard self.speed == object.speed else { return false }
      guard self.weather == object.weather else { return false }
      return true
    }

    public static func == (lhs: DailyWeathertItem, rhs: DailyWeathertItem) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
