//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension WMAPI.Weather {

    /** JSON returns the data from cities within the defined rectangle specified by the geographic coordinates. */
    public enum GetWeatherInRectZone {

        public static let service = APIService<Response>(id: "getWeatherInRectZone", tag: "weather", method: "GET", path: "/box/city", hasBody: false)

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** bounding box [lon-left,lat-bottom,lon-right,lat-top,zoom] */
                public var bbox: [Int]?

                public init(bbox: [Int]? = nil) {
                    self.bbox = bbox
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetWeatherInRectZone.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(bbox: [Int]? = nil) {
                let options = Options(bbox: bbox)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let bbox = options.bbox?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["bbox"] = bbox
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Coord

            /** OK */
            case status200(Coord)

            /** Invalid api key. */
            case status401(ServiceError)

            /** Not found. */
            case status404(ServiceError)

            public var success: Coord? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ServiceError? {
                switch self {
                case .status401(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Coord, ServiceError> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Coord.self, from: data))
                case 401: self = try .status401(decoder.decode(ServiceError.self, from: data))
                case 404: self = try .status404(decoder.decode(ServiceError.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
